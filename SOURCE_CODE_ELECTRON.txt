===========================================
LIBRARY ATTENDANCE SYSTEM - ELECTRON FILES
===========================================

This file contains the Electron main process and preload script for desktop app functionality.

===========================================
1. electron/main.js
===========================================

const { app, BrowserWindow, Menu, shell, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs').promises;
const isDev = process.env.NODE_ENV === 'development';

// Keep a global reference of the window object
let mainWindow;

function createWindow() {
  // Create the browser window
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    minWidth: 800,
    minHeight: 600,
    icon: path.join(__dirname, '../public/favicon.ico'),
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      webSecurity: true,
    },
    show: false,
    titleBarStyle: process.platform === 'darwin' ? 'hiddenInset' : 'default',
  });

  // Load the app
  if (isDev) {
    mainWindow.loadURL('http://localhost:8080');
    mainWindow.webContents.openDevTools();
  } else {
    mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));
  }

  // Show window when ready
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    
    if (isDev) {
      mainWindow.focus();
    }
  });

  // Handle window closed
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // Handle external links
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });
}

// App event handlers
app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Security: Prevent new window creation
app.on('web-contents-created', (event, contents) => {
  contents.on('new-window', (event, navigationUrl) => {
    event.preventDefault();
    shell.openExternal(navigationUrl);
  });
});

// Create application menu
function createMenu() {
  const template = [
    {
      label: 'File',
      submenu: [
        {
          label: 'Quit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'Edit',
      submenu: [
        { role: 'undo' },
        { role: 'redo' },
        { type: 'separator' },
        { role: 'cut' },
        { role: 'copy' },
        { role: 'paste' }
      ]
    },
    {
      label: 'View',
      submenu: [
        { role: 'reload' },
        { role: 'forceReload' },
        { role: 'toggleDevTools' },
        { type: 'separator' },
        { role: 'resetZoom' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { type: 'separator' },
        { role: 'togglefullscreen' }
      ]
    },
    {
      label: 'Window',
      submenu: [
        { role: 'minimize' },
        { role: 'close' }
      ]
    }
  ];

  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideOthers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' }
      ]
    });
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

app.whenReady().then(() => {
  createMenu();
  setupFileHandlers();
});

// File system handlers for data persistence
function setupFileHandlers() {
  const dataPath = path.join(app.getPath('userData'), 'library-attendance-data.json');

  // Save data to file
  ipcMain.handle('save-data', async (event, data) => {
    try {
      await fs.writeFile(dataPath, JSON.stringify(data, null, 2), 'utf8');
      console.log('Data saved to:', dataPath);
      return { success: true };
    } catch (error) {
      console.error('Failed to save data:', error);
      return { success: false, error: error.message };
    }
  });

  // Load data from file
  ipcMain.handle('load-data', async () => {
    try {
      const data = await fs.readFile(dataPath, 'utf8');
      console.log('Data loaded from:', dataPath);
      return { success: true, data: JSON.parse(data) };
    } catch (error) {
      if (error.code === 'ENOENT') {
        // File doesn't exist, return default data
        console.log('No data file found, returning defaults');
        return { 
          success: true, 
          data: { 
            students: [], 
            attendanceRecords: [], 
            lastSync: null 
          } 
        };
      }
      console.error('Failed to load data:', error);
      return { success: false, error: error.message };
    }
  });

  // Clear data file
  ipcMain.handle('clear-data', async () => {
    try {
      await fs.unlink(dataPath);
      console.log('Data file cleared');
      return { success: true };
    } catch (error) {
      if (error.code === 'ENOENT') {
        // File doesn't exist, consider it cleared
        return { success: true };
      }
      console.error('Failed to clear data:', error);
      return { success: false, error: error.message };
    }
  });
}

===========================================
2. electron/preload.js
===========================================

// Preload script for security
const { contextBridge, ipcRenderer } = require('electron');

// Expose protected methods that allow the renderer process to use
// the ipcRenderer without exposing the entire object
contextBridge.exposeInMainWorld('electronAPI', {
  platform: process.platform,
  versions: process.versions,
  // File system operations
  saveData: (data) => ipcRenderer.invoke('save-data', data),
  loadData: () => ipcRenderer.invoke('load-data'),
  clearData: () => ipcRenderer.invoke('clear-data'),
});

===========================================
3. electron/package.json
===========================================

{
  "name": "library-attendance-electron",
  "version": "1.0.0",
  "description": "Library Attendance System - Desktop Application",
  "main": "main.js",
  "scripts": {
    "start": "electron ."
  },
  "author": "Library Attendance System",
  "license": "MIT",
  "devDependencies": {},
  "dependencies": {}
}
